# vim:fdm=marker:ft=kitty

#-------------------------------------------------------------------------------
# Keymaps to remember
#-------------------------------------------------------------------------------
# <Ctrl>-<Cmd>-, - reload config
# <Cmd>+n - new window

#-------------------------------------------------------------------------------
# Fonts {{{
#-------------------------------------------------------------------------------

font_family      Comic Code Ligatures
bold_font        auto
italic_font      auto
bold_italic_font auto

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: +list-fonts` command. By default they are derived automatically, by
#: the OSes font system. When bold_font or bold_italic_font is set to
#: auto on macOS, the priority of bold fonts is semi-bold, bold,
#: heavy. Setting them manually is useful for font families that have
#: many weight variants like Book, Medium, Thick, etc. For example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

# font_family      MonoLisa Nasy Regular
# bold_font        MonoLisa Nasy Medium
# italic_font      MonoLisa Nasy Regular Italic
# bold_italic_font MonoLisa Nasy Medium Italic

# font_family      OMSSmLigNFC Book
# bold_font        OMSSmLigNFC Medium
# italic_font      OMSSmLigNFC Book Italic
# bold_italic_font OMSSmLigNFC Medium Italic

# font_family      Cartograph CF Light
# italic_font      Cartograph CF Light Italic
# bold_font        Cartograph CF Regular
# bold_italic_font Cartograph CF Regular Italic

font_size 18.0

#: Font size (in pts)

# modify_font
# modify_font cell_height 110%
# modify_font cell_width 125%

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts. For example::

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px

#: Additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. For example::

#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

#: Note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: Increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. Decreasing the cell size might cause
#: rendering artifacts, so use with care.

disable_ligatures cursor

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them. You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Note that this refers to programming ligatures, typically
#: implemented using the calt OpenType feature. For disabling general
#: ligatures, use the font_features option.

# symbol_map

#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Map the specified Unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each Unicode code
#: point is specified in the form `U+<code point in hexadecimal>`. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. This option can be specified multiple times.
#: The syntax is::

#:     symbol_map codepoints Font Family Name

# Nerd Fonts - https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points
# Symbola - https://dn-works.com/wp-content/uploads/2021/UFAS121921/Symbola.pdf
# Apple Symbols - https://en.wikipedia.org/wiki/Apple_Symbols
# Apple Color Emoji - https://en.wikipedia.org/wiki/Apple_Color_Emoji

# Seti-UI + Custom
symbol_map U+E5FA-U+E631 Symbols Nerd Font
# Devicons
symbol_map U+E700-U+E7C5 Symbols Nerd Font
# Font Awesome
symbol_map U+F000-U+F2E0 Symbols Nerd Font
# Font Awesome Extension
symbol_map U+E200-U+E2A9 Symbols Nerd Font
# Material Design Icons
symbol_map U+F500-U+FD46 Symbols Nerd Font
# Weather
symbol_map U+E300-U+E3EB Symbols Nerd Font
# Octicons
symbol_map U+F400-U+F4A9,U+2665,U+26A1 Symbols Nerd Font
# Powerline Symbols
symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 Symbols Nerd Font
# Powerline Extra Symbols
symbol_map U+E0A3,U+E0B4-U+E0C8,U+E0CA,U+E0CC-U+E0D4 Symbols Nerd Font
# IEC Power Symbols
symbol_map U+23FB-U+23FE,U+2b58 Symbols Nerd Font
# Font Logos
symbol_map U+F300-U+F32D Symbols Nerd Font
# Pomicons
symbol_map U+E000-U+E00A Symbols Nerd Font

# Letterlike symbols - https://en.wikipedia.org/wiki/Letterlike_Symbols
symbol_map U+2100–U+214F Symbola

# Arrows - https://en.wikipedia.org/wiki/Arrows_(Unicode_block)
symbol_map U+2190-U+21FF Symbola

# Miscellaneous Symbols - https://en.wikipedia.org/wiki/Miscellaneous_Symbols
symbol_map U+2600–U+26FF Symbola

# Dingbats - https://en.wikipedia.org/wiki/Dingbats_(Unicode_block)
symbol_map U+2700-U+27BF Symbola

# vscode-codicons - https://github.com/microsoft/vscode-codicons/blob/main/dist/codicon.ttf
symbol_map U+EA60-U+EBFF codicon

# CJK Unified Ideographs - https://en.wikipedia.org/wiki/CJK_Unified_Ideographs
symbol_map U+4E00-U+9FFF LXGW WenKai

# CJK Compatibility - https://en.wikipedia.org/wiki/CJK_Compatibility
# symbol_map U+3300–U+33FF PingFang SC

# Runic - https://en.wikipedia.org/wiki/Runic_(Unicode_block)
# symbol_map U+16A0-U+16FF Apple Symbols

# Emoji - https://en.wikipedia.org/wiki/Emoji#In_Unicode
# symbol_map U+1F300-U+1F5FF Apple Color Emoji

# }}}

#-------------------------------------------------------------------------------
# Window layout {{{
#-------------------------------------------------------------------------------

window_padding_width 0 2 0 4

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

hide_window_decorations titlebar-only

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only can be used to only hide the titlebar.
#: Whether this works and exactly what effect it has depends on the
#: window manager/operating system. Note that the effects of changing
#: this option when reloading config are undefined.

# resize_draw_strategy static

#: Choose how kitty draws a window while a resize is in progress. A
#: value of static means draw the current window contents, mostly
#: unchanged. A value of scale means draw the current window contents
#: scaled. A value of blank means draw a blank window. A value of size
#: means show the window size in cells.

# }}}

#-------------------------------------------------------------------------------
# Tab bar {{{
#-------------------------------------------------------------------------------

tab_bar_style hidden

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create a mapping
#:     for the select_tab action which presents you with a list of tabs and
#:     allows for easy switching to a tab.

# }}}

#-------------------------------------------------------------------------------
# Color scheme {{{
#-------------------------------------------------------------------------------

background_opacity 0.96

#: The opacity of the background. A number between zero and one, where
#: one is opaque and zero is fully transparent. This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. But it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. Instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. Or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. Be aware that using a value less than 1.0 is a (possibly
#: significant) performance hit. If you want to dynamically change
#: transparency of windows, set dynamic_background_opacity to yes
#: (this is off by default as it has a performance cost). Changing
#: this option when reloading the config will only work if
#: dynamic_background_opacity was enabled in the original config.

# background_image none

#: Path to a background image. Must be in PNG format.

# background_image_layout tiled

#: Whether to tile, scale or clamp the background image. The value can
#: be one of tiled, mirror-tiled, scaled, clamped.

# background_tint 0.89

#: How much to tint the background image by the background color. The
#: tint is applied only under the text area, not margin/borders. This
#: option makes it easier to read the text. Tinting is done using the
#: current background color for each window. This option applies only
#: if background_opacity is set and transparent windows are supported
#: or background_image is set.

# }}}

#-------------------------------------------------------------------------------
# OS specific tweaks {{{
#-------------------------------------------------------------------------------

# macos_titlebar_color background

#: The color of the kitty window's titlebar on macOS. A value of
#: system means to use the default system color, light or dark can
#: also be used to set it explicitly. A value of background means to
#: use the background color of the currently active window and finally
#: you can use an arbitrary color, such as #12af59 or red. WARNING:
#: This option works by using a hack when arbitrary color (or
#: background) is configured, as there is no proper Cocoa API for it.
#: It sets the background color of the entire window and makes the
#: titlebar transparent. As such it is incompatible with
#: background_opacity. If you want to use both, you are probably
#: better off just hiding the titlebar with hide_window_decorations.

macos_option_as_alt left

#: Use the Option key as an Alt key on macOS. With this set to no,
#: kitty will use the macOS native Option+Key to enter Unicode
#: character behavior. This will break any Alt+Key keyboard shortcuts
#: in your terminal programs, but you can use the macOS Unicode input
#: technique. You can use the values: left, right or both to use only
#: the left, right or both Option keys as Alt, instead. Note that
#: kitty itself always treats Option the same as Alt. This means you
#: cannot use this option to configure different kitty shortcuts for
#: Option+Key vs. Alt+Key. Also, any kitty shortcuts using
#: Option/Alt+Key will take priority, so that any such key presses
#: will not be passed to terminal programs running inside kitty.
#: Changing this option by reloading the config is not supported.

# macos_quit_when_last_window_closed no

#: Have kitty quit when all the top-level windows are closed on macOS.
#: By default, kitty will stay running, even with no open windows, as
#: is the expected behavior on macOS.

# macos_thicken_font 0.75

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes on macOS. For example, a
#: value of 0.75 will result in rendering that looks similar to sub-
#: pixel antialiasing at common font sizes.

# }}}

#-------------------------------------------------------------------------------
# Includes {{{
#-------------------------------------------------------------------------------

# You can include secondary config files via the "include" directive.
# If you use a relative path for include, it is resolved with respect to the
# location of the current config file. For example:

include themes/carbonfox.conf

# }}}
